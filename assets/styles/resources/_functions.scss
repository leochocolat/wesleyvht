@function strip-unit($number) {
    @return $number / ($number * 0 + 1);
}

@function rem($value, $name: 'extra-small') {
    @if map-has-key($sizes, $name) {
        $viewport-size: map-get($sizes, $name);
        @return #{strip-unit($value) / (strip-unit($viewport-size) / 100)}rem;
    }

    @else {
        @warn 'Unfortunately, no value could retieved from `#{$name}`. Please make sure it is defined in the `$sizes` map.';
    }
}

@function letter-spacing($value, $font-size) {
    @return #{strip-unit($value) / strip-unit($font-size)}em;
}

@function container-size($name: 'extra-small') {
    $viewport-size: map-get($sizes, $name);
    $columns-margin: map-get($columns-margins, $name);
    $total-width: $viewport-size - (2 * $columns-margin);

    @return calc(#{rem($total-width, $name)} - var(--scrollbar-width));
}

@function size($columns, $gutters, $name: 'extra-small') {
    @if map-has-key($columns-amounts, $name) {
        $columns-amount: map-get($columns-amounts, $name);
        $columns-gutter: map-get($columns-gutters, $name);
        $column-width: calc(#{container-size($name)} / #{$columns-amount} - #{rem($columns-gutter, $name)} + #{rem($columns-gutter, $name)} / #{$columns-amount});
        @return calc(#{$column-width} * #{$columns} + #{rem($columns-gutter, $name)} * #{$gutters});
    }

    @else {
        @warn 'Unfortunately, no value could retieved from `#{$name}`. Please make sure it is defined in the `$sizes` map.';
    }
}

@function aspect-ratio($width, $height) {
    @return #{strip-unit($height) / strip-unit($width) * 100%};
}
